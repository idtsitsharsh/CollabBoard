{"ast":null,"code":"var _jsxFileName = \"F:\\\\Open Project'25\\\\MARS Open Project\\\\Harsh\\\\Client Side\\\\src\\\\socket\\\\Socket.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [currentRoom, setCurrentRoom] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [socketReady, setSocketReady] = useState(false);\n  useEffect(() => {\n    const SOCKET_URL = process.env.REACT_APP_SOCKET_URL;\n    const newSocket = io(SOCKET_URL);\n    setSocketReady(false);\n    newSocket.on('connect', () => {\n      setIsConnected(true);\n      console.log('Connected to server');\n    });\n    newSocket.on('disconnect', () => {\n      setIsConnected(false);\n      console.log('Disconnected from server');\n    });\n    newSocket.on('room-joined', data => {\n      setCurrentRoom(data.room);\n      setUsers(data.users);\n      console.log('[SocketContext] Joined room:', data.room);\n      console.log('[SocketContext] currentRoom after set:', data.room);\n    });\n    newSocket.on('user-list', users => {\n      setUsers(users);\n    });\n    newSocket.on('join-error', error => {\n      console.error('Join error:', error);\n      alert(error.message);\n    });\n    setSocket(newSocket);\n    setSocketReady(true);\n    return () => {\n      newSocket.close();\n      setSocketReady(false);\n    };\n  }, []);\n  const joinRoom = (roomId, username, isPrivate = false, password = '') => {\n    if (socket) {\n      socket.emit('join-room', {\n        roomId,\n        username,\n        isPrivate,\n        password\n      });\n    }\n  };\n  const leaveRoom = cb => {\n    if (socket && currentRoom) {\n      socket.emit('leave-room', {\n        roomId: currentRoom.roomId\n      }, cb);\n      setCurrentRoom(null);\n      setUsers([]);\n    } else if (cb) {\n      cb();\n    }\n  };\n  const sendDraw = drawData => {\n    if (socket && drawData.roomId) {\n      if (drawData.type === 'stroke') {\n        socket.emit('stroke', drawData);\n      } else {\n        socket.emit('draw', drawData);\n      }\n    }\n  };\n  const clearCanvas = roomId => {\n    const effectiveRoomId = currentRoom && currentRoom.roomId || roomId;\n    if (socket && effectiveRoomId) {\n      console.log('[SocketContext] Emitting clear-canvas for room:', effectiveRoomId);\n      socket.emit('clear-canvas', {\n        roomId: effectiveRoomId\n      });\n    } else {\n      console.log('[SocketContext] clearCanvas: No currentRoom or socket');\n    }\n  };\n  const undo = roomId => {\n    const effectiveRoomId = currentRoom && currentRoom.roomId || roomId;\n    if (socket && effectiveRoomId) {\n      console.log('[SocketContext] Emitting undo for room:', effectiveRoomId);\n      socket.emit('undo', {\n        roomId: effectiveRoomId\n      });\n    } else {\n      console.log('[SocketContext] undo: No currentRoom or socket');\n    }\n  };\n  const redo = roomId => {\n    const effectiveRoomId = currentRoom && currentRoom.roomId || roomId;\n    if (socket && effectiveRoomId) {\n      console.log('[SocketContext] Emitting redo for room:', effectiveRoomId);\n      socket.emit('redo', {\n        roomId: effectiveRoomId\n      });\n    } else {\n      console.log('[SocketContext] redo: No currentRoom or socket');\n    }\n  };\n  const sendMessage = (message, username, roomId) => {\n    const effectiveRoomId = currentRoom && currentRoom.roomId || roomId;\n    if (socket && effectiveRoomId) {\n      socket.emit('send-message', {\n        roomId: effectiveRoomId,\n        username: username || currentRoom && currentRoom.username || 'Anonymous',\n        message\n      });\n    }\n  };\n  const value = {\n    socket,\n    isConnected,\n    currentRoom,\n    users,\n    joinRoom,\n    leaveRoom,\n    sendDraw,\n    clearCanvas,\n    undo,\n    redo,\n    sendMessage,\n    socketReady\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"3c35oURVrLkdR1woi/k5d8DklyU=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","currentRoom","setCurrentRoom","users","setUsers","socketReady","setSocketReady","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","newSocket","on","console","log","data","room","error","alert","message","close","joinRoom","roomId","username","isPrivate","password","emit","leaveRoom","cb","sendDraw","drawData","type","clearCanvas","effectiveRoomId","undo","redo","sendMessage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Open Project'25/MARS Open Project/Harsh/Client Side/src/socket/Socket.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [currentRoom, setCurrentRoom] = useState(null);\r\n  const [users, setUsers] = useState([]);\r\n  const [socketReady, setSocketReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const SOCKET_URL = process.env.REACT_APP_SOCKET_URL;\r\n    const newSocket = io(SOCKET_URL);\r\n    setSocketReady(false);\r\n    newSocket.on('connect', () => {\r\n      setIsConnected(true);\r\n      console.log('Connected to server');\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      setIsConnected(false);\r\n      console.log('Disconnected from server');\r\n    });\r\n\r\n    newSocket.on('room-joined', (data) => {\r\n      setCurrentRoom(data.room);\r\n      setUsers(data.users);\r\n      console.log('[SocketContext] Joined room:', data.room);\r\n      console.log('[SocketContext] currentRoom after set:', data.room);\r\n    });\r\n\r\n    newSocket.on('user-list', (users) => {\r\n      setUsers(users);\r\n    });\r\n\r\n    newSocket.on('join-error', (error) => {\r\n      console.error('Join error:', error);\r\n      alert(error.message);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n    setSocketReady(true);\r\n\r\n    return () => {\r\n      newSocket.close();\r\n      setSocketReady(false);\r\n    };\r\n  }, []);\r\n\r\n  const joinRoom = (roomId, username, isPrivate = false, password = '') => {\r\n    if (socket) {\r\n      socket.emit('join-room', { roomId, username, isPrivate, password });\r\n    }\r\n  };\r\n\r\n  const leaveRoom = (cb) => {\r\n    if (socket && currentRoom) {\r\n      socket.emit('leave-room', { roomId: currentRoom.roomId }, cb);\r\n      setCurrentRoom(null);\r\n      setUsers([]);\r\n    } else if (cb) {\r\n      cb();\r\n    }\r\n  };\r\n\r\n  const sendDraw = (drawData) => {\r\n    if (socket && drawData.roomId) {\r\n      if (drawData.type === 'stroke') {\r\n        socket.emit('stroke', drawData);\r\n      } else {\r\n        socket.emit('draw', drawData);\r\n      }\r\n    }\r\n  };\r\n\r\n  const clearCanvas = (roomId) => {\r\n    const effectiveRoomId = (currentRoom && currentRoom.roomId) || roomId;\r\n    if (socket && effectiveRoomId) {\r\n      console.log('[SocketContext] Emitting clear-canvas for room:', effectiveRoomId);\r\n      socket.emit('clear-canvas', { roomId: effectiveRoomId });\r\n    } else {\r\n      console.log('[SocketContext] clearCanvas: No currentRoom or socket');\r\n    }\r\n  };\r\n\r\n  const undo = (roomId) => {\r\n    const effectiveRoomId = (currentRoom && currentRoom.roomId) || roomId;\r\n    if (socket && effectiveRoomId) {\r\n      console.log('[SocketContext] Emitting undo for room:', effectiveRoomId);\r\n      socket.emit('undo', { roomId: effectiveRoomId });\r\n    } else {\r\n      console.log('[SocketContext] undo: No currentRoom or socket');\r\n    }\r\n  };\r\n\r\n  const redo = (roomId) => {\r\n    const effectiveRoomId = (currentRoom && currentRoom.roomId) || roomId;\r\n    if (socket && effectiveRoomId) {\r\n      console.log('[SocketContext] Emitting redo for room:', effectiveRoomId);\r\n      socket.emit('redo', { roomId: effectiveRoomId });\r\n    } else {\r\n      console.log('[SocketContext] redo: No currentRoom or socket');\r\n    }\r\n  };\r\n\r\n  const sendMessage = (message, username, roomId) => {\r\n    const effectiveRoomId = (currentRoom && currentRoom.roomId) || roomId;\r\n    if (socket && effectiveRoomId) {\r\n      socket.emit('send-message', {\r\n        roomId: effectiveRoomId,\r\n        username: username || (currentRoom && currentRoom.username) || 'Anonymous',\r\n        message\r\n      });\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    currentRoom,\r\n    users,\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendDraw,\r\n    clearCanvas,\r\n    undo,\r\n    redo,\r\n    sendMessage,\r\n    socketReady\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}