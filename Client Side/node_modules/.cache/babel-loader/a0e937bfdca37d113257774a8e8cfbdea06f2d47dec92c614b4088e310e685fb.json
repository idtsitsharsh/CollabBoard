{"ast":null,"code":"var _jsxFileName = \"F:\\\\Open Project'25\\\\MARS Open Project\\\\Collaborative-whiteboard-with-real-time-drawing\\\\frontend\\\\src\\\\components\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1200;\nconst CANVAS_HEIGHT = 700;\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  tool = 'pen',\n  color = '#000000',\n  brushSize = 2,\n  opacity = 1,\n  onDrawEvent,\n  onDrawStart,\n  onDrawEnd,\n  remoteDrawEvent,\n  undoStack,\n  redoStack\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const drawing = useRef(false);\n  const startPoint = useRef(null);\n  const snapshot = useRef(null);\n  const localUndoStack = useRef([]);\n  const localRedoStack = useRef([]);\n  const currentStroke = useRef([]);\n  const lastDraw = useRef(null);\n  const pendingDraw = useRef(null);\n  const saveSnapshot = () => {\n    const imageData = ctxRef.current.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    localUndoStack.current.push(imageData);\n    localRedoStack.current = [];\n  };\n  useImperativeHandle(ref, () => ({\n    exportImage: () => canvasRef.current.toDataURL('image/png'),\n    exportPDF: async () => {\n      const jsPDF = (await import('jspdf')).jsPDF;\n      const dataUrl = canvasRef.current.toDataURL('image/png');\n      const pdf = new jsPDF({\n        orientation: 'landscape'\n      });\n      pdf.addImage(dataUrl, 'PNG', 10, 10, 280, 160);\n      return pdf;\n    },\n    clear: () => clearCanvas(),\n    undo: () => handleUndo(),\n    redo: () => handleRedo(),\n    loadImageFromDataUrl: dataUrl => {\n      const img = new window.Image();\n      img.onload = () => {\n        ctxRef.current.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        ctxRef.current.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        saveSnapshot();\n      };\n      img.src = dataUrl;\n    }\n  }));\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = CANVAS_WIDTH;\n    canvas.height = CANVAS_HEIGHT;\n    ctxRef.current = canvas.getContext('2d');\n    ctxRef.current.lineCap = 'round';\n    ctxRef.current.lineJoin = 'round';\n    ctxRef.current.globalAlpha = opacity;\n    saveSnapshot();\n  }, [opacity]);\n  useEffect(() => {\n    if (!remoteDrawEvent) return;\n    const {\n      type\n    } = remoteDrawEvent;\n    if (type === 'stroke') drawStroke(remoteDrawEvent.points, remoteDrawEvent);else if (type === 'draw') drawLine(remoteDrawEvent.prev, remoteDrawEvent.current, remoteDrawEvent);else if (type === 'shape') drawShape(remoteDrawEvent);else if (type === 'text') drawText(remoteDrawEvent);else if (type === 'clear') clearCanvas();\n  }, [remoteDrawEvent]);\n  const getPointer = e => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const scaleX = canvasRef.current.width / rect.width;\n    const scaleY = canvasRef.current.height / rect.height;\n    return {\n      x: (e.clientX - rect.left) * scaleX,\n      y: (e.clientY - rect.top) * scaleY\n    };\n  };\n  const handlePointerDown = e => {\n    drawing.current = true;\n    const point = getPointer(e);\n    startPoint.current = point;\n    snapshot.current = ctxRef.current.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    currentStroke.current = [point];\n    if (tool === 'pen' || tool === 'eraser') {\n      ctxRef.current.beginPath();\n      ctxRef.current.moveTo(point.x, point.y);\n      ctxRef.current.strokeStyle = tool === 'eraser' ? '#fff' : color;\n      ctxRef.current.lineWidth = brushSize;\n      ctxRef.current.globalAlpha = opacity;\n      onDrawStart === null || onDrawStart === void 0 ? void 0 : onDrawStart(point);\n    }\n  };\n  const handlePointerMove = e => {\n    if (!drawing.current) return;\n    const point = getPointer(e);\n    if (tool === 'pen' || tool === 'eraser') {\n      ctxRef.current.lineTo(point.x, point.y);\n      ctxRef.current.strokeStyle = tool === 'eraser' ? '#fff' : color;\n      ctxRef.current.lineWidth = brushSize;\n      ctxRef.current.globalAlpha = opacity;\n      ctxRef.current.stroke();\n      currentStroke.current.push(point);\n    } else if (tool === 'rectangle' || tool === 'circle') {\n      ctxRef.current.putImageData(snapshot.current, 0, 0);\n      ctxRef.current.strokeStyle = color;\n      ctxRef.current.lineWidth = brushSize;\n      ctxRef.current.globalAlpha = opacity;\n      if (tool === 'rectangle') {\n        const width = point.x - startPoint.current.x;\n        const height = point.y - startPoint.current.y;\n        ctxRef.current.strokeRect(startPoint.current.x, startPoint.current.y, width, height);\n      } else {\n        const radius = Math.sqrt((point.x - startPoint.current.x) ** 2 + (point.y - startPoint.current.y) ** 2);\n        ctxRef.current.beginPath();\n        ctxRef.current.arc(startPoint.current.x, startPoint.current.y, radius, 0, 2 * Math.PI);\n        ctxRef.current.stroke();\n      }\n    }\n  };\n  const handlePointerUp = e => {\n    if (!drawing.current) return;\n    drawing.current = false;\n    const point = getPointer(e);\n    if (tool === 'rectangle' || tool === 'circle') {\n      handlePointerMove(e);\n      onDrawEvent === null || onDrawEvent === void 0 ? void 0 : onDrawEvent({\n        type: 'shape',\n        shape: tool,\n        start: startPoint.current,\n        end: point,\n        color,\n        brushSize,\n        opacity,\n        canvasData: canvasRef.current.toDataURL('image/png')\n      });\n    }\n    saveSnapshot();\n    onDrawEnd === null || onDrawEnd === void 0 ? void 0 : onDrawEnd(point);\n    if ((tool === 'pen' || tool === 'eraser') && currentStroke.current.length > 1) {\n      onDrawEvent === null || onDrawEvent === void 0 ? void 0 : onDrawEvent({\n        type: 'stroke',\n        points: currentStroke.current,\n        tool,\n        color,\n        brushSize,\n        opacity,\n        canvasData: canvasRef.current.toDataURL('image/png')\n      });\n    } else if (tool !== 'rectangle' && tool !== 'circle') {\n      onDrawEvent === null || onDrawEvent === void 0 ? void 0 : onDrawEvent({\n        type: 'end',\n        canvasData: canvasRef.current.toDataURL('image/png'),\n        tool,\n        color,\n        brushSize,\n        opacity\n      });\n    }\n    currentStroke.current = [];\n  };\n  const handleDoubleClick = e => {\n    if (tool === 'text') {\n      const point = getPointer(e);\n      const text = prompt('Enter text:');\n      if (text) {\n        ctxRef.current.font = `${brushSize * 6}px Arial`;\n        ctxRef.current.fillStyle = color;\n        ctxRef.current.globalAlpha = opacity;\n        ctxRef.current.fillText(text, point.x, point.y);\n        saveSnapshot();\n        onDrawEvent === null || onDrawEvent === void 0 ? void 0 : onDrawEvent({\n          type: 'text',\n          text,\n          point,\n          color,\n          brushSize,\n          opacity,\n          canvasData: canvasRef.current.toDataURL('image/png')\n        });\n      }\n    }\n  };\n  const clearCanvas = () => {\n    ctxRef.current.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    saveSnapshot();\n  };\n  const handleUndo = () => {\n    if (localUndoStack.current.length > 1) {\n      const current = localUndoStack.current.pop();\n      localRedoStack.current.push(current);\n      const prev = localUndoStack.current[localUndoStack.current.length - 1];\n      ctxRef.current.putImageData(prev, 0, 0);\n    } else if (localUndoStack.current.length === 1) {\n      localRedoStack.current.push(localUndoStack.current.pop());\n      ctxRef.current.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    }\n  };\n  const handleRedo = () => {\n    if (localRedoStack.current.length > 0) {\n      const image = localRedoStack.current.pop();\n      ctxRef.current.putImageData(image, 0, 0);\n      localUndoStack.current.push(image);\n    }\n  };\n  const drawLine = (from, to, settings) => {\n    ctxRef.current.save();\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(from.x, from.y);\n    ctxRef.current.lineTo(to.x, to.y);\n    ctxRef.current.strokeStyle = settings.tool === 'eraser' ? '#fff' : settings.color;\n    ctxRef.current.lineWidth = settings.brushSize;\n    ctxRef.current.globalAlpha = settings.opacity;\n    ctxRef.current.stroke();\n    ctxRef.current.restore();\n  };\n  const drawStroke = (points, settings) => {\n    if (!points || points.length < 2) return;\n    ctxRef.current.save();\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(points[0].x, points[0].y);\n    for (let i = 1; i < points.length; i++) {\n      ctxRef.current.lineTo(points[i].x, points[i].y);\n    }\n    ctxRef.current.strokeStyle = settings.tool === 'eraser' ? '#fff' : settings.color;\n    ctxRef.current.lineWidth = settings.brushSize;\n    ctxRef.current.globalAlpha = settings.opacity;\n    ctxRef.current.stroke();\n    ctxRef.current.restore();\n  };\n  const drawShape = ({\n    shape,\n    start,\n    end,\n    color,\n    brushSize,\n    opacity\n  }) => {\n    ctxRef.current.save();\n    ctxRef.current.strokeStyle = color;\n    ctxRef.current.lineWidth = brushSize;\n    ctxRef.current.globalAlpha = opacity;\n    if (shape === 'rectangle') {\n      ctxRef.current.strokeRect(start.x, start.y, end.x - start.x, end.y - start.y);\n    } else if (shape === 'circle') {\n      const radius = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\n      ctxRef.current.beginPath();\n      ctxRef.current.arc(start.x, start.y, radius, 0, 2 * Math.PI);\n      ctxRef.current.stroke();\n    }\n    ctxRef.current.restore();\n  };\n  const drawText = ({\n    text,\n    point,\n    color,\n    brushSize,\n    opacity\n  }) => {\n    ctxRef.current.save();\n    ctxRef.current.font = `${brushSize * 6}px Arial`;\n    ctxRef.current.fillStyle = color;\n    ctxRef.current.globalAlpha = opacity;\n    ctxRef.current.fillText(text, point.x, point.y);\n    ctxRef.current.restore();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      style: {\n        background: '#fff',\n        borderRadius: 16,\n        boxShadow: '0 4px 16px rgba(0,0,0,0.07)',\n        margin: 24,\n        cursor: tool === 'text' ? 'text' : tool === 'eraser' ? 'cell' : 'crosshair',\n        touchAction: 'none',\n        userSelect: 'none',\n        display: 'block',\n        width: '100%',\n        height: 'auto',\n        maxWidth: '100%',\n        maxHeight: '80vh',\n        objectFit: 'contain'\n      },\n      onPointerDown: handlePointerDown,\n      onPointerMove: handlePointerMove,\n      onPointerUp: handlePointerUp,\n      onDoubleClick: handleDoubleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n}, \"4Vjn5rWZxQvW+VZbXbPaykrLg/Q=\")), \"4Vjn5rWZxQvW+VZbXbPaykrLg/Q=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useImperativeHandle","forwardRef","jsxDEV","_jsxDEV","CANVAS_WIDTH","CANVAS_HEIGHT","Canvas","_s","_c","tool","color","brushSize","opacity","onDrawEvent","onDrawStart","onDrawEnd","remoteDrawEvent","undoStack","redoStack","ref","canvasRef","ctxRef","drawing","startPoint","snapshot","localUndoStack","localRedoStack","currentStroke","lastDraw","pendingDraw","saveSnapshot","imageData","current","getImageData","push","exportImage","toDataURL","exportPDF","jsPDF","dataUrl","pdf","orientation","addImage","clear","clearCanvas","undo","handleUndo","redo","handleRedo","loadImageFromDataUrl","img","window","Image","onload","clearRect","drawImage","src","canvas","width","height","getContext","lineCap","lineJoin","globalAlpha","type","drawStroke","points","drawLine","prev","drawShape","drawText","getPointer","e","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","handlePointerDown","point","beginPath","moveTo","strokeStyle","lineWidth","handlePointerMove","lineTo","stroke","putImageData","strokeRect","radius","Math","sqrt","arc","PI","handlePointerUp","shape","start","end","canvasData","length","handleDoubleClick","text","prompt","font","fillStyle","fillText","pop","image","from","to","settings","save","restore","i","style","position","display","children","background","borderRadius","boxShadow","margin","cursor","touchAction","userSelect","maxWidth","maxHeight","objectFit","onPointerDown","onPointerMove","onPointerUp","onDoubleClick","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["F:/Open Project'25/MARS Open Project/Collaborative-whiteboard-with-real-time-drawing/frontend/src/components/Canvas.js"],"sourcesContent":["import React, { useRef, useEffect, useImperativeHandle, forwardRef } from 'react';\r\n\r\nconst CANVAS_WIDTH = 1200;\r\nconst CANVAS_HEIGHT = 700;\r\n\r\nconst Canvas = forwardRef(({ \r\n  tool = 'pen', \r\n  color = '#000000', \r\n  brushSize = 2, \r\n  opacity = 1,\r\n  onDrawEvent,\r\n  onDrawStart,\r\n  onDrawEnd,\r\n  remoteDrawEvent,\r\n  undoStack,\r\n  redoStack\r\n}, ref) => {\r\n  const canvasRef = useRef(null);\r\n  const ctxRef = useRef(null);\r\n  const drawing = useRef(false);\r\n  const startPoint = useRef(null);\r\n  const snapshot = useRef(null);\r\n  const localUndoStack = useRef([]);\r\n  const localRedoStack = useRef([]);\r\n  const currentStroke = useRef([]);\r\n\r\n  const lastDraw = useRef(null);\r\n  const pendingDraw = useRef(null);\r\n\r\n  const saveSnapshot = () => {\r\n    const imageData = ctxRef.current.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    localUndoStack.current.push(imageData);\r\n    localRedoStack.current = [];\r\n  };\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    exportImage: () => canvasRef.current.toDataURL('image/png'),\r\n    exportPDF: async () => {\r\n      const jsPDF = (await import('jspdf')).jsPDF;\r\n      const dataUrl = canvasRef.current.toDataURL('image/png');\r\n      const pdf = new jsPDF({ orientation: 'landscape' });\r\n      pdf.addImage(dataUrl, 'PNG', 10, 10, 280, 160);\r\n      return pdf;\r\n    },\r\n    clear: () => clearCanvas(),\r\n    undo: () => handleUndo(),\r\n    redo: () => handleRedo(),\r\n    loadImageFromDataUrl: (dataUrl) => {\r\n      const img = new window.Image();\r\n      img.onload = () => {\r\n        ctxRef.current.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n        ctxRef.current.drawImage(img, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n        saveSnapshot();\r\n      };\r\n      img.src = dataUrl;\r\n    }\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    canvas.width = CANVAS_WIDTH;\r\n    canvas.height = CANVAS_HEIGHT;\r\n    ctxRef.current = canvas.getContext('2d');\r\n    ctxRef.current.lineCap = 'round';\r\n    ctxRef.current.lineJoin = 'round';\r\n    ctxRef.current.globalAlpha = opacity;\r\n\r\n    saveSnapshot();\r\n  }, [opacity]);\r\n\r\n  useEffect(() => {\r\n    if (!remoteDrawEvent) return;\r\n    const { type } = remoteDrawEvent;\r\n    if (type === 'stroke') drawStroke(remoteDrawEvent.points, remoteDrawEvent);\r\n    else if (type === 'draw') drawLine(remoteDrawEvent.prev, remoteDrawEvent.current, remoteDrawEvent);\r\n    else if (type === 'shape') drawShape(remoteDrawEvent);\r\n    else if (type === 'text') drawText(remoteDrawEvent);\r\n    else if (type === 'clear') clearCanvas();\r\n  }, [remoteDrawEvent]);\r\n\r\n  const getPointer = (e) => {\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const scaleX = canvasRef.current.width / rect.width;\r\n    const scaleY = canvasRef.current.height / rect.height;\r\n    return {\r\n      x: (e.clientX - rect.left) * scaleX,\r\n      y: (e.clientY - rect.top) * scaleY\r\n    };\r\n  };\r\n\r\n  const handlePointerDown = (e) => {\r\n    drawing.current = true;\r\n    const point = getPointer(e);\r\n    startPoint.current = point;\r\n    snapshot.current = ctxRef.current.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    currentStroke.current = [point];\r\n    if (tool === 'pen' || tool === 'eraser') {\r\n      ctxRef.current.beginPath();\r\n      ctxRef.current.moveTo(point.x, point.y);\r\n      ctxRef.current.strokeStyle = tool === 'eraser' ? '#fff' : color;\r\n      ctxRef.current.lineWidth = brushSize;\r\n      ctxRef.current.globalAlpha = opacity;\r\n      onDrawStart?.(point);\r\n    }\r\n  };\r\n\r\n  const handlePointerMove = (e) => {\r\n    if (!drawing.current) return;\r\n    const point = getPointer(e);\r\n    if (tool === 'pen' || tool === 'eraser') {\r\n      ctxRef.current.lineTo(point.x, point.y);\r\n      ctxRef.current.strokeStyle = tool === 'eraser' ? '#fff' : color;\r\n      ctxRef.current.lineWidth = brushSize;\r\n      ctxRef.current.globalAlpha = opacity;\r\n      ctxRef.current.stroke();\r\n      currentStroke.current.push(point);\r\n    } else if (tool === 'rectangle' || tool === 'circle') {\r\n      ctxRef.current.putImageData(snapshot.current, 0, 0);\r\n      ctxRef.current.strokeStyle = color;\r\n      ctxRef.current.lineWidth = brushSize;\r\n      ctxRef.current.globalAlpha = opacity;\r\n      if (tool === 'rectangle') {\r\n        const width = point.x - startPoint.current.x;\r\n        const height = point.y - startPoint.current.y;\r\n        ctxRef.current.strokeRect(startPoint.current.x, startPoint.current.y, width, height);\r\n      } else {\r\n        const radius = Math.sqrt((point.x - startPoint.current.x) ** 2 + (point.y - startPoint.current.y) ** 2);\r\n        ctxRef.current.beginPath();\r\n        ctxRef.current.arc(startPoint.current.x, startPoint.current.y, radius, 0, 2 * Math.PI);\r\n        ctxRef.current.stroke();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePointerUp = (e) => {\r\n    if (!drawing.current) return;\r\n    drawing.current = false;\r\n    const point = getPointer(e);\r\n\r\n    if (tool === 'rectangle' || tool === 'circle') {\r\n      handlePointerMove(e);\r\n      onDrawEvent?.({\r\n        type: 'shape',\r\n        shape: tool,\r\n        start: startPoint.current,\r\n        end: point,\r\n        color,\r\n        brushSize,\r\n        opacity,\r\n        canvasData: canvasRef.current.toDataURL('image/png')\r\n      });\r\n    }\r\n\r\n    saveSnapshot();\r\n\r\n    onDrawEnd?.(point);\r\n\r\n    if ((tool === 'pen' || tool === 'eraser') && currentStroke.current.length > 1) {\r\n      onDrawEvent?.({\r\n        type: 'stroke',\r\n        points: currentStroke.current,\r\n        tool,\r\n        color,\r\n        brushSize,\r\n        opacity,\r\n        canvasData: canvasRef.current.toDataURL('image/png')\r\n      });\r\n    } else if (tool !== 'rectangle' && tool !== 'circle') {\r\n      onDrawEvent?.({\r\n        type: 'end',\r\n        canvasData: canvasRef.current.toDataURL('image/png'),\r\n        tool,\r\n        color,\r\n        brushSize,\r\n        opacity\r\n      });\r\n    }\r\n\r\n    currentStroke.current = [];\r\n  };\r\n\r\n  const handleDoubleClick = (e) => {\r\n    if (tool === 'text') {\r\n      const point = getPointer(e);\r\n      const text = prompt('Enter text:');\r\n      if (text) {\r\n        ctxRef.current.font = `${brushSize * 6}px Arial`;\r\n        ctxRef.current.fillStyle = color;\r\n        ctxRef.current.globalAlpha = opacity;\r\n        ctxRef.current.fillText(text, point.x, point.y);\r\n        saveSnapshot();\r\n        onDrawEvent?.({\r\n          type: 'text',\r\n          text,\r\n          point,\r\n          color,\r\n          brushSize,\r\n          opacity,\r\n          canvasData: canvasRef.current.toDataURL('image/png')\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    ctxRef.current.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    saveSnapshot();\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    if (localUndoStack.current.length > 1) {\r\n      const current = localUndoStack.current.pop();\r\n      localRedoStack.current.push(current);\r\n      const prev = localUndoStack.current[localUndoStack.current.length - 1];\r\n      ctxRef.current.putImageData(prev, 0, 0);\r\n    } else if (localUndoStack.current.length === 1) {\r\n      localRedoStack.current.push(localUndoStack.current.pop());\r\n      ctxRef.current.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    }\r\n  };\r\n\r\n  const handleRedo = () => {\r\n    if (localRedoStack.current.length > 0) {\r\n      const image = localRedoStack.current.pop();\r\n      ctxRef.current.putImageData(image, 0, 0);\r\n      localUndoStack.current.push(image);\r\n    }\r\n  };\r\n\r\n  const drawLine = (from, to, settings) => {\r\n    ctxRef.current.save();\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(from.x, from.y);\r\n    ctxRef.current.lineTo(to.x, to.y);\r\n    ctxRef.current.strokeStyle = settings.tool === 'eraser' ? '#fff' : settings.color;\r\n    ctxRef.current.lineWidth = settings.brushSize;\r\n    ctxRef.current.globalAlpha = settings.opacity;\r\n    ctxRef.current.stroke();\r\n    ctxRef.current.restore();\r\n  };\r\n\r\n  const drawStroke = (points, settings) => {\r\n    if (!points || points.length < 2) return;\r\n    ctxRef.current.save();\r\n    ctxRef.current.beginPath();\r\n    ctxRef.current.moveTo(points[0].x, points[0].y);\r\n    for (let i = 1; i < points.length; i++) {\r\n      ctxRef.current.lineTo(points[i].x, points[i].y);\r\n    }\r\n    ctxRef.current.strokeStyle = settings.tool === 'eraser' ? '#fff' : settings.color;\r\n    ctxRef.current.lineWidth = settings.brushSize;\r\n    ctxRef.current.globalAlpha = settings.opacity;\r\n    ctxRef.current.stroke();\r\n    ctxRef.current.restore();\r\n  };\r\n\r\n  const drawShape = ({ shape, start, end, color, brushSize, opacity }) => {\r\n    ctxRef.current.save();\r\n    ctxRef.current.strokeStyle = color;\r\n    ctxRef.current.lineWidth = brushSize;\r\n    ctxRef.current.globalAlpha = opacity;\r\n    if (shape === 'rectangle') {\r\n      ctxRef.current.strokeRect(start.x, start.y, end.x - start.x, end.y - start.y);\r\n    } else if (shape === 'circle') {\r\n      const radius = Math.sqrt((end.x - start.x) ** 2 + (end.y - start.y) ** 2);\r\n      ctxRef.current.beginPath();\r\n      ctxRef.current.arc(start.x, start.y, radius, 0, 2 * Math.PI);\r\n      ctxRef.current.stroke();\r\n    }\r\n    ctxRef.current.restore();\r\n  };\r\n\r\n  const drawText = ({ text, point, color, brushSize, opacity }) => {\r\n    ctxRef.current.save();\r\n    ctxRef.current.font = `${brushSize * 6}px Arial`;\r\n    ctxRef.current.fillStyle = color;\r\n    ctxRef.current.globalAlpha = opacity;\r\n    ctxRef.current.fillText(text, point.x, point.y);\r\n    ctxRef.current.restore();\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', display: 'inline-block' }}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={CANVAS_WIDTH}\r\n        height={CANVAS_HEIGHT}\r\n        style={{\r\n          background: '#fff',\r\n          borderRadius: 16,\r\n          boxShadow: '0 4px 16px rgba(0,0,0,0.07)',\r\n          margin: 24,\r\n          cursor: tool === 'text' ? 'text' : tool === 'eraser' ? 'cell' : 'crosshair',\r\n          touchAction: 'none',\r\n          userSelect: 'none',\r\n          display: 'block',\r\n          width: '100%',\r\n          height: 'auto',\r\n          maxWidth: '100%',\r\n          maxHeight: '80vh',\r\n          objectFit: 'contain',\r\n        }}\r\n        onPointerDown={handlePointerDown}\r\n        onPointerMove={handlePointerMove}\r\n        onPointerUp={handlePointerUp}\r\n        onDoubleClick={handleDoubleClick}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}